0::o9.2o22::2020.3.0

===============================================================================
note: an LTS version of Unity (currently 2021 and up) is *strongly* recommended
- NetCode for GameObjects might fail to install in newest tech version/s
(NetCode for GameObjects 1.5.x itself requires 2021.3 and higher)
Please refer to official NetCode for GameObjects installation guide e.g. [https://docs-multiplayer.unity3d.com/netcode/current/installation/]
===============================================================================


===============================================================================
Quick setup:
===============================================================================

Drop 'Prefabs\AudioStreamNetCodeServer' and 'Prefabs\NetworkManager' into scene
- you can set server to automatically start in Host or Server mode, or start network scene as Client

If you now run two instances (editor + build, or build + build) with one set automatically to Server/Host and the other to Client on the same machine,
the Client should automatically connect to default localhost IP and you should be hearing demo audio on the client (server prefab has monitoring volume set to 0 by default so it's not audible).

Please refer also to demo scene 'Demo\AudioStreamNetCodeDemo' and 'AudioStreamNetCodeDemo.cs' script where everything is set up and 'Prefabs\AudioStreamNetCodeServer' to see how components are ordered on a GameObject.

Asmdef package has weak references (non GUID) to "Unity.Netcode.Runtime" and "AudioStreamSupport".


-------------------------------------------------------------------------------
About Demo:
    AudioStreamNetCodeServer prefab instance in demo scene and AudioStreamNetCodeClient prefab have both extra graphics child game object just for demo purposes.
    These are used by AudioStreamNetCodeDemo script only and can be removed/replaced/changed.

    - The demo tints color of the sprite and places client transform randomly around origin when it's spawned.
    - All clients also have their transforms synced to server:
        - AudioStreamNetCodeClient prefab has NetworkTransform, and demo adds a script allowing to move clients at runtime
        - use W/A/S/D to move, R to reset the position
        - see OnClientConnected event handler in AudioStreamNetCodeDemo

    - if skybox/background is missing in the scene please assign Demo\_Support\Textures\Skybox material to SkyboxMaterial in Lighting Settings <<


-------------------------------------------------------------------------------
General:
    - you will probably want to increase Networkmanager/Transport defaults such as 'Max Send Queue Size' if connecting many clients
    - moreover, since the demo uses Transform syncing for all clients, these use Reliable queue which require higher bandwidth ->
        when using audio transfer only the limits on Transport can be easened


===============================================================================
Server/Source component:
===============================================================================

'AudioStreamNetCodeServer' can be attached on any GameObject which produces sound in an Unity scene - so any AudioSource or AudioListener.
It acts as Singleton with DontDestroyOnLoad flag and has hard dependency on 'AudioSourceCaptureBuffer' which will be automatically added if necessary.

You can attach any effect/s in the chain on the prefab/gameobject above 'AudioSourceCaptureBuffer'.
Audio is encoded after all sound processing is done so it respects all effects/spatialization enabled on the GameObject.

For each connected client a spearate GameObject is created parented under 'AudioStreamNetCodeServer' - this is currently necessary because each client requires unique mix since it can transmit back (see below),
thus requiring unique AudioSource and encoder.
On server all clients GameObjects names also contain their connection id.

If not set to automatically start as Host/Server/Client, call appropriate method StartHost() / StartServer(), resp. NetworkManager.Singleton.StartClient() for each mode.

For scripting please refer also to demo scene 'Demo\AudioStreamNetCodeDemo' and 'AudioStreamNetCodeDemo.cs' script.



===============================================================================
NetworkManager:
===============================================================================

A single NetworkManager in scene is required by Unity NetCode.
'NetworkManager' prefab in 'Prefabs' is a version customized for AudioStreamNetCode containing also NetworkTransport which has 'AudioStreamNetCodeClient' prefab set as Player Prefab.
It uses all default settings for NetworkManager and NetworkTransport otherwise.

IMPORTANT: Relay Unity Transport is not implemented due to Unity having restriction for this type of network data on their service - please see 'Relay and alternative transports' below.



===============================================================================
Client component:
===============================================================================

'AudioStreamNetCodeClient' is a NetworkBehaviour component which decodes incoming network data into its own AudioSource (the AudioSource on the same GameObject).

Optionally it can also send encoded audio back to server - either its own AudioSource or UnityMicrophone
Thesse are set up on separate GameObjects as children of AudioStreamNetCodeClient and are being transmitted when 'transmitClientAudioSource'/'transmitClientMicrophone' are ON.

    'ClientTxAudioSource' - client audio, customize AudioSource here
    'ClientTxUnityMicrophone' - client microphone, please customize AudioStreamUnityMicrophone, such as Microphone Device Id, here

As per above this compressed stream is decoded on server and mixed with audio from server and all other clients.

'AudioStreamNetCodeClient' prefab in 'Prefabs' is setup like this and is set as Player Prefab on NetworkManager.


===============================================================================
Relay and alternative transports:
===============================================================================

Realy Unity Transport is not implemented so far, mainly due to UT service restriction,

See e.g. https://docs.unity.com/relay/introduction.html#Fair_usage:
"
The Relay service is intended for the transmission of multiplayer game state only. Usage of the service outside this category is subject to rate limiting or termination under terms of service.
Unfair use of the Relay service includes, but is not limited to, the following examples:
Audio streaming of any nature, including voice chat
Video streaming of any nature
File transfer services
Distributed computation unrelated to gameplay, including crypto mining
General network proxying and other VPN-like services
"


It is possible, however, to use custom transport & relay for NetworkManager - see https://docs-multiplayer.unity3d.com/netcode/current/advanced-topics/transports#community-transports-or-writing-your-own
and https://github.com/Unity-Technologies/multiplayer-community-contributions


No direct Relay support for any of the custom transports has been implemented so far.


===============================================================================
Audio encoder/decoder:
===============================================================================

For audio de/compression is used Opus codec C# implementation - [https://github.com/lostromb/concentus] - via pair of components: AudioStreamEncoder and AudioStreamDecoder

AudioStreamEncoder's components public fields should be reasonably well explained via tooltips on each field in the Editor.

Both have 'Monitoring Volume' slider which doesn't modify processed signal, but allows its audition monitoring after it enters/leaves de/encoder.


===============================================================================
IL2CPP builds and building with IL2CPP runtime checks turned off:
===============================================================================

Code running most tight audio loops can be optionally built with null, array bounds and division by zero checks turned off for IL2CPP builds (which is generally recommended but it's advisable to verify that build is running correctly with them being turned off first)

The needed attributes for this are included in the package, but you are advised to verify this, i.e. check for your Unity version, see e.g. https://docs.unity3d.com/2018.4/Documentation/Manual/IL2CPP-CompilerOptions.html (and your/respective Editor version) how to do that.
The file 'Il2CppSetOptionAttribute.cs' must be placed into project's 'AudioStream/Support' folder (or any of its subfolders) - must be part of the 'AudioStreamSupport' assembly definition

- if project doesn't have ENABLE_IL2CPP compiler define added already, add ENABLE_IL2CPP to Scripting Define Symbols in Player Settings
